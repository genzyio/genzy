// Auto-generated by Genzy Client CLI
{% for name, fields in types %}
import { {{name}} } from "./types/{{name}}";
{% endfor %}
{% if extends %}
import {
{{extends}}
} from "./{{extends}}";
{% endif %}
{% if dependencies | length %}
import { GenzyServicesContainerDeps } from ".";
{% endif %}

export class {{ name }} {% if extends %} extends {{ extends }} {% endif %} {
{% if dependencies | length %}
  {% for dependency in dependencies %}
    private {{dependency}}: GenzyServicesContainerDeps["{{dependency}}"];
  {% endfor %}
  constructor(deps: GenzyServicesContainerDeps) {
  {% for dependency in dependencies %}
    this.{{dependency}} = deps.{{dependency}};
  {% endfor %}
  }
{% endif %}
{% for action in actions %} {{ methods }}
  async {{ action.name }}
  ({% for param in action.params %}{{ param.name }}
  {%- if param.$isOptional %}?{% endif -%}: 
  {{ param.typeAdapted.name }}{% if param.$isArray %}[]{% endif %}
  {%- if not loop.last %}, {% endif -%}
  {% endfor %}): Promise<{{ action.resultType.name }}{% if action.result.$isArray %}[]{% endif %}>
  {% if action.existingBody %}
    {{ action.existingBody | safe }}
  {% else %}
    {
      // @ts-ignore
      return null;
    }
  {% endif %}
{% endfor %}

{% for existingMethod in existingMethodsNotInMeta %}
  {{ existingMethod | safe }}
{% endfor %}
}
