[{"title":"API Plugins","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/API-Plugins/","content":"API Plugins TODO: write","keywords":""},{"title":"CLI Installation","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/cli-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"CLI Installation","url":"docs/0.0.1-alpha/cli-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"CLI Installation","url":"docs/0.0.1-alpha/cli-installation/#installation","content":"To install the latest release: NPMYarn npm install -g @genzy/cli  To install a specific version: NPMYarn npm install -g @genzy/cli@version  "},{"title":"Advanced Mechanisms","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/","content":"Advanced Mechanisms Here are some additional mechanisms for handling different use cases. ServerClientAPI Plugins Adding validation of API requestsRegistering a service for accessing Redis CacheCreating a custom Plugin Interceptors API InterceptorsClient InterceptorsError Mapping","keywords":""},{"title":"CLI Usage","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/cli-usage/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"CLI Usage","url":"docs/0.0.1-alpha/cli-usage/#prerequisites","content":"You need to have installed the @genzy/cli library in your project. "},{"title":"Syntax​","type":1,"pageTitle":"CLI Usage","url":"docs/0.0.1-alpha/cli-usage/#syntax","content":"The syntax for generating the client code is simple, you need to run the genzy -l &lt;language&gt; -h &lt;host&gt; -o &lt;output_dir&gt; library and pass the following arguments: genzy -h - for help-l - language ts - generates the TypeScript client. js - generates the JavaScript client. -h - the url of the Genzy deployment.-o - the path of the directory (existing or new) in which the client files will be stored. "},{"title":"Generating the Client​","type":1,"pageTitle":"CLI Usage","url":"docs/0.0.1-alpha/cli-usage/#generating-the-client","content":""},{"title":"TypeScript​","type":1,"pageTitle":"CLI Usage","url":"docs/0.0.1-alpha/cli-usage/#typescript","content":"genzy -l ts -h http://localhost:3000 -o ./path/to/output/dir/  "},{"title":"JavaScript​","type":1,"pageTitle":"CLI Usage","url":"docs/0.0.1-alpha/cli-usage/#javascript","content":"genzy -l js -h http://localhost:3000 -o ./path/to/output/dir/  "},{"title":"Client Initialization","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/client-initialization/","content":"","keywords":""},{"title":"Initialization​","type":1,"pageTitle":"Client Initialization","url":"docs/0.0.1-alpha/client-initialization/#initialization","content":""},{"title":"Standalone​","type":1,"pageTitle":"Client Initialization","url":"docs/0.0.1-alpha/client-initialization/#standalone","content":"CommonJSES modulesTypeScript const { GenzyContainer } = require(&quot;@genzy/client&quot;); class ExampleService { async get() {} } const container = new GenzyContainer().addRemoteService( &quot;http://localhost:3000&quot;, ExampleService ); const { exampleService } = nimble.getAllServices();  "},{"title":"Options​","type":1,"pageTitle":"Client Initialization","url":"docs/0.0.1-alpha/client-initialization/#options","content":"The complete list of available options can be found here. "},{"title":"Client Installation","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/client-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Client Installation","url":"docs/0.0.1-alpha/client-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"Client Installation","url":"docs/0.0.1-alpha/client-installation/#installation","content":"To install the latest release: NPMYarn npm install @genzy/client  To install a specific version: NPMYarn npm install @genzy/client@version  "},{"title":"Miscellaneous​","type":1,"pageTitle":"Client Installation","url":"docs/0.0.1-alpha/client-installation/#miscellaneous","content":""},{"title":"Dependency tree​","type":1,"pageTitle":"Client Installation","url":"docs/0.0.1-alpha/client-installation/#dependency-tree","content":"A basic installation of the client includes 2 packages: @genzy/client@1.2.3 ├── axios@0.24.0 └── blueimp-tmpl@3.20.0  "},{"title":"index","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/","content":"index TODO: write","keywords":""},{"title":"Request-Validation","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/API-Plugins/Request-Validation","content":"","keywords":""},{"title":"Adding validation of API requests​","type":1,"pageTitle":"Request-Validation","url":"docs/0.0.1-alpha/framework/Advanced-Guides/API-Plugins/Request-Validation#adding-validation-of-api-requests","content":"Zod validation that registers interceptors npm i -S genzy-zod-validation import { Plugin as GenzyZodValidationPlugin } from &quot;genzy-zod-validation&quot;; // ... const app = new GenzyApi() .addPlugin(new GenzyZodValidationPlugin()) .buildAppFrom(controllers); // now types of request parameters (path, query and body) get validated  "},{"title":"Creating-a-custom-plugin","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/API-Plugins/Creating-a-custom-plugin","content":"","keywords":""},{"title":"Creating a custom Plugin​","type":1,"pageTitle":"Creating-a-custom-plugin","url":"docs/0.0.1-alpha/framework/Advanced-Guides/API-Plugins/Creating-a-custom-plugin#creating-a-custom-plugin","content":"The only requirement is that the plugin needs to expose the Plugin class. The class has access to all meta information, api and provided containers. export { Application, Request, Response, NextFunction } from &quot;express&quot;; import { GenzyPlugin, GenzyConfig, ServiceMetaInfo, MetaTypesRegistry, GenzyPluginParams, GenzyContainer, } from &quot;@genzy.io/api&quot;; export class Plugin extends GenzyPlugin { constructor(params?: { containers?: GenzyContainer[] }); beforeAll(params: GenzyPluginParams): void | Promise&lt;void&gt;; beforeRouteRegister( params: GenzyPluginParams &amp; { serviceKey: string; serviceInstance: any; genzyConfig: GenzyConfig; } ): void | Promise&lt;void&gt;; afterRouteRegister( params: GenzyPluginParams &amp; { serviceKey: string; serviceInstance: any; genzyConfig: GenzyConfig; meta: ServiceMetaInfo &amp; { types: MetaTypesRegistry }; } ): void | Promise&lt;void&gt;; afterAll(params: GenzyPluginParams): void | Promise&lt;void&gt;; }  "},{"title":"Redis-Connector","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/API-Plugins/Redis-Connector","content":"","keywords":""},{"title":"Registering a service for accessing Redis Cache​","type":1,"pageTitle":"Redis-Connector","url":"docs/0.0.1-alpha/framework/Advanced-Guides/API-Plugins/Redis-Connector#registering-a-service-for-accessing-redis-cache","content":"Redis Cache access that registers a service to passed containers npm i -S genzy-redis-plugin import { Plugin as GenzyRedisPlugin, RedisService } from &quot;genzy-redis-plugin&quot;; class TestService { private redisService: RedisService; constructor({ redisService }: { redisService: RedisService }) { this.redisService = redisService; } async check(key: string) { const fromCache = await this.redisService.get(key); if (!fromCache) { throw new Error(&quot;Key not found.&quot;); } } } const controllers = new GenzyContainer(); const services = new GenzyContainer().addLocalService(TestService); const app = new GenzyApi() .addPlugin(new GenzyRedisPlugin({ containers: [services] })) .buildAppFrom(controllers); // now TestService has access to RedisService that is automatically injected  "},{"title":"Client API","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/client-api/","content":"","keywords":""},{"title":"Reference​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#reference","content":"The following is the GenzyContainer class with all method signatures. export class GenzyContainer { constructor(); public addLocalService(type: Constructor): GenzyContainer; public addLocalServices(...types: Constructor): GenzyContainer; public addRemoteService(origin: string, type: Constructor): GenzyContainer; public addRemoteServices(origin: string, ...types: Constructor): GenzyContainer; public interceptCalls(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyContainer; public interceptResults(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyContainer; public interceptAllCalls(callback: InterceptorCallback): GenzyContainer; public interceptAllResults(callback: InterceptorCallback): GenzyContainer; public getAllServices(): any; }  "},{"title":"new GenzyContainer()​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#new-genzycontainer","content":"Creates a new instance of GenzyContainer. "},{"title":"nimble.addLocalService(type)​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimbleaddlocalservicetype","content":"Registers a local service class to the nimble. type &lt;Constructor&gt; "},{"title":"nimble.addLocalServices(types)​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimbleaddlocalservicestypes","content":"Registers local service classes to the nimble. types &lt;Constructor&gt;[] "},{"title":"nimble.addRemoteService(origin, type)​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimbleaddremoteserviceorigin-type","content":"Registers a remote service class to the nimble. origin &lt;string&gt; type &lt;Constructor&gt; Registers remote service classes to the nimble. origin &lt;string&gt; types &lt;Constructor&gt;[] "},{"title":"nimble.interceptCalls(interceptors)​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimbleinterceptcallsinterceptors","content":"Registers a set of custom Client interceptors that execute before each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimble.interceptResults(interceptors)​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimbleinterceptresultsinterceptors","content":"Registers a set of custom Client interceptors that execute after each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimble.interceptAllCalls(callback)​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimbleinterceptallcallscallback","content":"Registers a custom Client interceptor that executes before all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimble.interceptAllResults(callback)​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimbleinterceptallresultscallback","content":"Registers a custom Client interceptor that executes after all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimble.getAllServices()​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#nimblegetallservices","content":"Returns GenzyContainer's service registry. "},{"title":"Types​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#types","content":""},{"title":"Constructor​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#constructor","content":"interface Constructor { new (...args: any[]); }  "},{"title":"GenzyInfo​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#genzyinfo","content":"type GenzyInfo = { version?: string; name?: string; description?: string; basePath?: string; }  "},{"title":"InterceptorCallback​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#interceptorcallback","content":"type InterceptorCallback = ({setHeader, getHeader, setBody, getBody}: {setHeader: (key: string, value: string) =&gt; any, getHeader: (key: string) =&gt; string, setBody: (body: any) =&gt; any, getBody: () =&gt; any}) =&gt; any;  "},{"title":"CustomInterceptors​","type":1,"pageTitle":"Client API","url":"docs/0.0.1-alpha/client-api/#custominterceptors","content":"type CustomInterceptors&lt;TInterceptorCallback&gt; = { [classKey: string]: { [methodKey: string]: TInterceptorCallback } };  "},{"title":"Error Mapping","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/error","content":"","keywords":""},{"title":"API Custom Error to Status Code Mapping​","type":1,"pageTitle":"Error Mapping","url":"docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/error#api-custom-error-to-status-code-mapping","content":"class BadLogicError extends Error { name = &quot;BadLogicError&quot;; constructor(message?: string) { super(message); } } class InternalServerError extends Error { name = &quot;InternalServerError&quot;; constructor(message?: string) { super(message); } } const app = new GenzyApi() .withErrors({ [BadLogicError.name]: 400, [InternalServerError.name]: 500, }) .buildAppFrom(controllers);  "},{"title":"Client Interceptors","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/client","content":"","keywords":""},{"title":"Client Interceptors​","type":1,"pageTitle":"Client Interceptors","url":"docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/client#client-interceptors","content":"A mechanism for intercepting client API calls and it's results. It can be used for things like setting custom headers, parsing the response body, etc. // Intercept all service calls const container = new GenzyContainer() .addRemoteService(UserService, host) .interceptAllCalls(({ setHeader, getHeader, setBody, getBody }) =&gt; { setHeader(&quot;Authorization&quot;, &quot;Bearer &lt;token&gt;&quot;); }); // Intercept only specific method calls const container = new GenzyContainer() .addRemoteService(UserService, host) .interceptCalls({ accountController: { create({ setHeader, getHeader, setBody, getBody }) { setBody({ ...getBody(), timestamp: new Date() }); }, }, }); // Define interceptors with an interceptor class class AccountControllerCallInterceptor { create({ setHeader, getHeader, setBody, getBody }) { setHeader(&quot;classCallInterceptor&quot;, &quot;Works!&quot;); } } const container = new GenzyContainer() .addRemoteService(UserService, host) .interceptCalls({ accountController: AccountControllerCallInterceptor, }); // Intercept all service results const container = new GenzyContainer() .addRemoteService(UserService, host) .interceptAllResults(({ setHeader, getHeader, setBody, getBody }) =&gt; { validateBody(getBody()); setToken(getHeader(&quot;Token&quot;)); }); // Intercept only specific method results const container = new GenzyContainer() .addRemoteService(UserService, host) .interceptResults({ accountController: { create({ setHeader, getHeader, setBody, getBody }) { setBody({ ...getBody(), count: getBody().items.length }); }, }, }); // Define interceptors with an interceptor class class AccountControllerResultInterceptor { create({ setHeader, getHeader, setBody, getBody }) { setHeader(&quot;classResultInterceptor&quot;, &quot;Works!&quot;); } } const container = new GenzyContainer() .addRemoteService(UserService, host) .interceptResults({ accountController: AccountControllerResultInterceptor, });  "},{"title":"How it works","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/how-it-works/","content":"How it works Under the hood, Genzy is using JavaScript's Proxy API to intercept all method calls and gather the required information for registring the routes. Genzy keeps all services in it's own internal service registry, and implements Dependency Inversion principle. The registry contains all services from a GenzyContainer, and is injected as a first parameter of every service constructor. Client is using Axios for sending HTTP requests. Server is using Express for creating a web API. It implements the custom logic for creating OpenAPI documentation based on the information gathered from the GenzyContainer services. SwaggerUI is created using the swagger-ui-express library.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/","content":"","keywords":""},{"title":"What Genzy is​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#what-genzy-is","content":"Genzy is a simple framework for building better API-s faster. It is built on top of the Express framework and provides additional features like automatic routes registration, client code generation and OpenAPI documentation, along with SwaggerUI. Here's a basic example: CommonJSES modulesTypeScript Server​ const { GenzyContainer, GenzyApi } = require(&quot;@genzy/api&quot;); class UserService { async createUser(user) { // logic for adding the user return user; } } class AccountService { // UserService is automatically injected constructor({ userService }) { this.userService = userService; } async getAllAccounts() { return []; } // take accountInfo object as parameter async createAccount({ username }) { // logic for adding the account const newAccount = { id: 1, username }; // call another service this.userService.createUser({ accountId: newAccount.id }); return newAccount; } } const usersGenzyContainer = new GenzyContainer().addLocalServices( UserService, AccountService ); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000);  CommonJSES modulesTypeScript Client​ const { GenzyContainer } = require(&quot;@genzy/client&quot;); const host = &quot;http://localhost:3000&quot;; class UserService { async createUser(user) {} } class AccountService { async getAllAccounts() {} async createAccount(account) {} } const usersGenzyContainer = new GenzyContainer().addRemoteServices( host, UserService, AccountService ); // The instances are available for custom usage const { userService, accountService } = usersGenzyContainer.getAllServices(); // Use the services accountService .createAccount({ username: &quot;test&quot;, }) .then((newAccount) =&gt; console.log(newAccount)) // created account from server .catch((error) =&gt; console.log(error)); // Fetch all accounts const allAccounts = await accountService.getAllAccounts();  "},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#features","content":"Here are the features provided by Genzy: "},{"title":"API​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#api","content":"Express Application is automatically created based on the service classes passed to the GenzyContainer. "},{"title":"Client​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#client-3","content":"Client service proxy is automatically created based on the service classes passed to the GenzyContainer. "},{"title":"Automatic JS/TS Client generation​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#automatic-jsts-client-generation","content":"@genzy/client package can be used to auto-generate client service files for the existing API. "},{"title":"Interceptors​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#interceptors","content":"Both Server and Client support defining interceptors. Most common use case for interceptors is handling Authorization, where the client sends a secret with an identity and the server validates it. "},{"title":"Automatic OpenAPI docs​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#automatic-openapi-docs","content":"Server automatically builds OpenAPI documentation, and serves SwaggerUI on route /explorer. "},{"title":"Next steps​","type":1,"pageTitle":"Introduction","url":"docs/0.0.1-alpha/#next-steps","content":"Server installationClient installation "},{"title":"API Interceptors","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/server","content":"","keywords":""},{"title":"API Interceptors​","type":1,"pageTitle":"API Interceptors","url":"docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/server#api-interceptors","content":"A mechanism for intercepting API requests and it's results. It can be used for things like validating headers, parsing the request or response body, etc. // Intercept all service handlers before they are called const app = new GenzyApi() .interceptAll((req: Request, res: Response, next: NextFunction) =&gt; { if (isTokenValid(req.headers.Authorization)) next(); else res.sendStatus(401); }) .buildAppFrom(controllers); // Intercept specific service handlers before they are called const container = new GenzyContainer().addLocalService(UserService); const app = new GenzyApi() .intercept({ accountController: { create: (req: Request, res: Response, next: NextFunction) =&gt; { if (isAdminUser(req.headers.Authorization)) next(); else res.sendStatus(401); }, }, }) .buildAppFrom(controllers); // Intercept specific service handlers before they are called with Interceptor class class AccountControllerInterceptor { createUser(req: Request, res: Response, next: NextFunction) { if (isAdminUser(req.headers.Authorization)) next(); else res.sendStatus(401); } } const container = new GenzyContainer().addLocalService(UserService); const app = new GenzyApi() .intercept({ accountController: { create: AccountControllerInterceptor, }, }) .buildAppFrom(controllers); // Intercept all service handlers after they are called const container = new GenzyContainer().addLocalService(UserService); const app = new GenzyApi() .interceptAllAfter((req: Request, res: Response, next: NextFunction) =&gt; { res.body({ message: &quot;Hello from Genzy.&quot; }); }) .buildAppFrom(controllers); // Intercept specific service handlers after they are called const container = new GenzyContainer().addLocalService(UserService); const app = new GenzyApi() .interceptAfter({ accountController: { create: (req: Request, res: Response, next: NextFunction) =&gt; { res.status(201); next(); }, }, }) .buildAppFrom(controllers); // Intercept specific service handlers after they are called with Interceptor class class AccountControllerInterceptor { createUser(req: Request, res: Response, next: NextFunction) { res.status(201); next(); } } const container = new GenzyContainer().addLocalService(UserService); const app = new GenzyApi() .interceptAfter({ accountController: { create: AccountControllerInterceptor, }, }) .buildAppFrom(controllers);  "},{"title":"Guides","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/guides/","content":"","keywords":""},{"title":"Quickstart​","type":1,"pageTitle":"Guides","url":"docs/0.0.1-alpha/guides/#quickstart","content":"Creating the APIGenerating the client "},{"title":"In Depth​","type":1,"pageTitle":"Guides","url":"docs/0.0.1-alpha/guides/#in-depth","content":"ServerClientAPI Plugins Adding validation of API requestsRegistering a service for accessing Redis CacheCreating a custom Plugin Interceptors API InterceptorsClient InterceptorsError Mapping "},{"title":"Generating the client","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/quickstart/client","content":"Generating the client Once you've created the API, the client code for accessing it can be automatically generated from the meta information provided by the API. In your client project: npm i -S @genzy.io/clientnpm i -g @genzy.io/cliTo generate the client code for accessing the API run: genzy -l ts -o ./src/account-client -h http://localhost:3000/api import { GenzyContainer } from &quot;@genzy.io/client&quot;; const host = &quot;http://localhost:3000&quot;; const container = new GenzyContainer().addRemoteService( AccountController, host ); // The instances are available for custom usage const { accountController } = container.getServices(); // Use the services accountController .createAccount({ username: &quot;test&quot;, isAdmin: false, }) .then((newAccount) =&gt; console.log(newAccount)) // created account from server .catch((error) =&gt; console.log(error)); ","keywords":""},{"title":"Server Installation","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/server-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Server Installation","url":"docs/0.0.1-alpha/server-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"Server Installation","url":"docs/0.0.1-alpha/server-installation/#installation","content":"To install the latest release: NPMYarn npm install @genzy/api  To install a specific version: NPMYarn npm install @genzy/api@version  "},{"title":"Miscellaneous​","type":1,"pageTitle":"Server Installation","url":"docs/0.0.1-alpha/server-installation/#miscellaneous","content":""},{"title":"Dependency tree​","type":1,"pageTitle":"Server Installation","url":"docs/0.0.1-alpha/server-installation/#dependency-tree","content":"A basic installation of the server includes 4 packages: @genzy/api@1.2.3 ├── cors@2.8.5 ├── express@4.17.1 ├── @genzy/client@1.2.0 └── swagger-ui-express@4.3.0  "},{"title":"Server API","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/server-api/","content":"","keywords":""},{"title":"Reference​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#reference","content":"The following is the GenzyApi class with all method signatures. export class GenzyApi { constructor(); constructor(options: {app?: Application, genzyInfo?: GenzyInfo, basePath?: string}); public intercept(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyApi; public interceptAfter(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyApi; public interceptAll(callback: InterceptorCallback): GenzyApi; public interceptAllAfter(callback: InterceptorCallback): GenzyApi; public withErrors(errors: ErrorRegistry): GenzyApi; public from(containers: GenzyContainer[]): Application; }  "},{"title":"new GenzyApi(options)​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#new-genzyapioptions","content":"Creates a new instance of GenzyApi. options &lt;Object&gt; app? &lt;Application&gt; genzyInfo? &lt;GenzyInfo&gt; basePath? &lt;string&gt; "},{"title":"genzyApi.from(containers)​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#genzyapifromcontainers","content":"Creates a new Express Application from a set of GenzyContainers. nimbles &lt;Array&gt; "},{"title":"genzyApi.intercept(interceptors)​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#genzyapiinterceptinterceptors","content":"Registers a set of custom API interceptors that execute before each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"genzyApi.interceptAfter(interceptors)​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#genzyapiinterceptafterinterceptors","content":"Registers a set of custom API interceptors that execute after each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"genzyApi.interceptAll(callback)​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#genzyapiinterceptallcallback","content":"Registers a custom API interceptor that executes before all requests. callback &lt;InterceptorCallback&gt; "},{"title":"genzyApi.interceptAllAfter(callback)​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#genzyapiinterceptallaftercallback","content":"Registers a custom API interceptor that executes after all requests. callback &lt;InterceptorCallback&gt; "},{"title":"genzyApi.withErrors(errorRegistry)​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#genzyapiwitherrorserrorregistry","content":"Registers a set of custom error status codes that set the response status based on the error that is thrown. errorRegistry &lt;ErrorRegistry&gt; "},{"title":"Types​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#types","content":""},{"title":"GenzyInfo​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#genzyinfo","content":"type GenzyInfo = { version?: string; name?: string; description?: string; basePath?: string; }  "},{"title":"InterceptorCallback​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#interceptorcallback","content":"type InterceptorCallback = (req: Request, res: Response, next: NextFunction) =&gt; any;  "},{"title":"CustomInterceptors​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#custominterceptors","content":"type CustomInterceptors&lt;TInterceptorCallback&gt; = { [classKey: string]: { [methodKey: string]: TInterceptorCallback } };  "},{"title":"ErrorRegistry​","type":1,"pageTitle":"Server API","url":"docs/0.0.1-alpha/server-api/#errorregistry","content":"type ErrorRegistry = { [key: string]: number };  "},{"title":"Creating the API","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/quickstart/api","content":"Creating the API npm init -ynpm i -D typescript ts-nodenpx tsc --initUpdate tsconfig.json: { // ... &quot;experimentalDecorators&quot;: true, &quot;strictPropertyInitialization&quot;: false } npm i -S @genzy.io/apiImplement services class AccountService { private userService: UserService; // UserService is automatically injected constructor({ userService }: { userService: UserService }) { this.userService = userService; } async createAccount(account: Account): Promise&lt;Account&gt; { if (await this.userService.checkIfUserExists(account.username)) { throw new UserAlreadyExistsError( `A user '${account.username}' already exists.` ); } // logic for adding the account const newAccount = { id: 1, ...account }; // return result return newAccount; } } // models import { string, boolean } from &quot;@genzy.io/api&quot;; class Account { @string() username: string; @boolean() isAdmin: boolean; } // errors class UserAlreadyExistsError extends Error { name = &quot;UserAlreadyExistsError&quot;; constructor(message?: string) { super(message); } } class UserService { private userRepository: UserRepository; // UserRepository is automatically injected constructor({ userRepository }: { userRepository: UserRepository }) { this.userRepository = userRepository; } async checkIfUserExists(username: string): Promise&lt;boolean&gt; { // logic for checking if user exists const user = await this.userRepository.findByUsername(username); return !!user; } } class UserRepository { async findByUsername(username: string) { // logic for finding a user from db by username return { username }; } } Create a controller import { Controller, Post } from &quot;@genzy.io/api&quot;; @Controller(&quot;/account&quot;) class AccountController { private accountService: AccountService; constructor({ services }: { services: { accountService: AccountService } }) { this.accountService = services.accountService; } @Post(&quot;/&quot;) @Returns(Account) async create(@Body({ type: Account }) account: Account): Promise&lt;Account&gt; { return this.accountService.createAccount(account); } } Create a Container of controllers and services import { GenzyContainer } from &quot;@genzy.io/api&quot;; const controllers = new GenzyContainer().addLocalServices(AccountController); const services = new GenzyContainer().addLocalServices( UserService, AccountService, UserRepository ); // add access to services controllers.addAccessToContainer(&quot;services&quot;, services); // you can get service instances directly from the container const { userService, accountService, userRepository } = services.getServices(); Create the API import { GenzyApi } from &quot;@genzy.io/api&quot;; // returns Express Application const app = new GenzyApi({ genzyInfo: { name: &quot;Account API&quot;, version: &quot;0.0.1&quot;, description: &quot;This API is used for creating accounts.&quot;, }, })..buildAppFrom(controllers); // start the server app.listen(3000); =&gt; # POST /api/account route is registered # you can go to /explorer and use Swagger UI # there is also a special /api/meta route used by Genzy to generate code ","keywords":""},{"title":"GenzyContainer","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/genzy-container/","content":"","keywords":""},{"title":"What GenzyContainer is​","type":1,"pageTitle":"GenzyContainer","url":"docs/0.0.1-alpha/genzy-container/#what-genzycontainer-is","content":"GenzyContainer holds a set of related service classes. It is responsible for handling their lifecycle and managing their dependencies. GenzyContainer can hold Local or Remote services. "},{"title":"Local Services​","type":1,"pageTitle":"GenzyContainer","url":"docs/0.0.1-alpha/genzy-container/#local-services","content":"Local services are ones that are running in the same process as GenzyContainer. CommonJSES modulesTypeScript const { GenzyContainer } = require(&quot;@genzy/client&quot;); // or &quot;@genzy/api&quot; class UserService { async getAll() { return []; } } class AccountService { constructor({ userService }) { this.userService = userService; } async getAll() { const accounts = []; const users = await this.userService.getAll(); return users.map(user =&gt; ({ ...user, account: accounts.find(acc =&gt; acc.id === user.accountId) })); } } // Creating the GenzyContainer const container = new GenzyContainer().addLocalServices(UserService, AccountService); // Getting the services out of the GenzyContainer. const { accountService } = nimble.getAllServices();  "},{"title":"Remote Services​","type":1,"pageTitle":"GenzyContainer","url":"docs/0.0.1-alpha/genzy-container/#remote-services","content":"Remote services are, as the name suggests, running in a different process, or on a different server. Methods of a remote service, that is in a GenzyContainer do not require any implementation code, but do require the URL of the server they are running on. CommonJSES modulesTypeScript const { GenzyContainer } = require(&quot;@genzy/client&quot;); // or &quot;@genzy/api&quot; class UserService { async getAll() {} } class AccountService { async getAll() {} } // Creating the GenzyContainer const container = new GenzyContainer() .addRemoteServices(&quot;http://localhost:3000&quot;, UserService, AccountService); // Getting the services out of the GenzyContainer. const { accountService } = nimble.getAllServices();  GenzyContainer implicitly creates a Proxy for each service that gets the results of method calls over HTTP. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/getting-started/","content":"","keywords":""},{"title":"Setting up the server​","type":1,"pageTitle":"Getting Started","url":"docs/0.0.1-alpha/getting-started/#setting-up-the-server","content":"Initialize the project npm init -y  Install @genzy/api library npm i -S @genzy/api  Implement Example service example.ts import { Controller, Get, Post, Put, Delete, Query, Path, Body, string, number, boolean, type, Returns, ReturnsArrayOf, } from &quot;@genzy/api&quot;; class Example { @string() name: string; @int() age: number; } @Controller(&quot;/examples&quot;) export class ExampleService { @Get() @ReturnsArrayOf(Example) async getAll( @Query(&quot;pageNumber&quot;) @int() pageNumber: number, @Query(&quot;pageSize&quot;) @int() pageSize: number ): Promise&lt;Example[]&gt; { return []; } @Get(&quot;/:id&quot;) @Returns(Example) async getById( @Query(&quot;includeDetails&quot;) @boolean() includeDetails: boolean, @Path(&quot;id&quot;) @string() id: string ): Promise&lt;Example&gt; { return; } @Post() @Returns(Example) async add(@Body() @type(Example) example: Example): Promise&lt;Example&gt; { return example; } @Put(&quot;/:id&quot;) @Returns(Example) async update( @Path(&quot;id&quot;) @string() id: string, @Body() @type(Example) example: Example ): Promise&lt;Example&gt; { return example; } @Delete(&quot;/:id&quot;) @Returns(Example) async delete(@Path(&quot;id&quot;) @string() id: string): Promise&lt;Example&gt; { return; } }  Create a GenzyContainer of services and the GenzyApi index.ts import { GenzyContainer, GenzyApi } from &quot;@genzy/api&quot;; import { ExampleService } from &quot;./example&quot;; const container = new GenzyContainer().addLocalService(ExampleService); const api = new GenzyApi({ genzyInfo: { name: &quot;Example Microservice&quot;, version: &quot;1.0.0&quot;, description: &quot;This is an example microservice.&quot;, }, }).from(container); const PORT = 3000; api.listen(PORT, () =&gt; console.log(`Started listening on ${PORT}`)); type GenzyContainerServices = { exampleService: ExampleService; }; // The instances are available for custom usage const { exampleService } = usersGenzyContainer.services();  5 routes have been registered GET /api/examplesGET /api/examples/{id}POST /api/examplesPUT /api/examples/{id}DELETE /api/examples/{id} ::: Setting up the client​ Initialize the project npm init -y Install @genzy/client library npm i -S @genzy/client Install @genzy/cli CLI npm i -g @genzy/cli Generate TypeScript client code genzy -l ts -h http://localhost:3000 -o ./services/example  services/example/index.tsservices/example/ExampleService.ts ::: services/example/index.ts // Auto-generated by Genzy Client CLI import { GenzyContainer } from &quot;@genzy/client&quot;; import { ExampleService as ExampleServiceLocal } from &quot;./ExampleService&quot;; const host = &quot;http://localhost:3000&quot;; export type GenzyContainerServices = { exampleService: ExampleServiceLocal; }; export const { exampleService }: GenzyContainerServices = new GenzyContainer() .ofRemote(ExampleServiceLocal, host) .services();  services/example/ExampleService.ts // Auto-generated by Genzy Client CLI import { Controller, Get, Post, Put, Delete, Query, Path, Body, } from &quot;@genzy/client&quot;; export class Example { name: string; age: number; } @Controller(&quot;/examples&quot;) export class ExampleService { @Get(&quot;/&quot;) async getAll( @Query(&quot;pageNumber&quot;) pageNumber: number, @Query(&quot;pageSize&quot;) pageSize: number ) {} @Get(&quot;/:id&quot;) async getById( @Query(&quot;includeDetails&quot;) includeDetails: string, @Path(&quot;id&quot;) id: boolean ) {} @Post(&quot;/&quot;) async add(@Body() body: Example) {} @Put(&quot;/:id&quot;) async update(@Path(&quot;id&quot;) id: string, @Body() body: Example) {} @Delete(&quot;/:id&quot;) async delete(@Path(&quot;id&quot;) id: string) {} }  Use the ExampleService elsewhere somewhere.ts import { exampleService } from &quot;./services/example&quot;; exampleService.getAll().then(console.log).catch(console.log);  "},{"title":"GenzyApi","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/genzy-api/","content":"","keywords":""},{"title":"What GenzyApi is​","type":1,"pageTitle":"GenzyApi","url":"docs/0.0.1-alpha/genzy-api/#what-genzyapi-is","content":"GenzyApi is responsible for automatically creating a RestAPI from a set of GenzyContainers. It is also responsible for automatically building OpenAPI documentation, and serving SwaggerUI on route /explorer. "},{"title":"Creating an API​","type":1,"pageTitle":"GenzyApi","url":"docs/0.0.1-alpha/genzy-api/#creating-an-api","content":""},{"title":"From Plain Local Services​","type":1,"pageTitle":"GenzyApi","url":"docs/0.0.1-alpha/genzy-api/#from-plain-local-services","content":"CommonJSES modulesTypeScript const { GenzyContainer, GenzyApi } = require(&quot;@genzy/api&quot;); class UserService { async createUser(user) { return user; } } class AccountService { async getAllAccounts() { return []; } } const usersGenzyContainer = new GenzyContainer().addLocalServices( UserService, AccountService ); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000);   "},{"title":"From Plain Remote Services​","type":1,"pageTitle":"GenzyApi","url":"docs/0.0.1-alpha/genzy-api/#from-plain-remote-services","content":"info An API can also be generated from a set of remote services, so that the API acts as an API Gateway. CommonJSES modulesTypeScript const { GenzyContainer, GenzyApi } = require(&quot;@genzy/api&quot;); class UserService { async createUser(user) {} } class AccountService { async getAllAccounts() {} } const usersGenzyContainer = new GenzyContainer().addRemoteServices( &quot;http://localhost:3000&quot;, UserService, AccountService ); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000);   "},{"title":"From Configured Local Services​","type":1,"pageTitle":"GenzyApi","url":"docs/0.0.1-alpha/genzy-api/#from-configured-local-services","content":"CommonJSES modulesTypeScript const { GenzyContainer, GenzyApi } = require(&quot;@genzy/api&quot;); class UserService { $genzy = { path: &quot;/users&quot;, createUser: { httpMethod: &quot;POST&quot;, path: &quot;/&quot;, params: [{ name: &quot;user&quot;, source: &quot;body&quot; }], }, }; async createUser(user) { return user; } } class AccountService { $genzy = { path: &quot;/accounts&quot;, getAllAccounts: { method: &quot;GET&quot;, path: &quot;/&quot;, }, }; async getAllAccounts() { return []; } } const usersGenzyContainer = new GenzyContainer().addLocalServices( UserService, AccountService ); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000);   "},{"title":"Server Initialization","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/server-initialization/","content":"","keywords":""},{"title":"Initialization​","type":1,"pageTitle":"Server Initialization","url":"docs/0.0.1-alpha/server-initialization/#initialization","content":""},{"title":"Standalone​","type":1,"pageTitle":"Server Initialization","url":"docs/0.0.1-alpha/server-initialization/#standalone","content":"CommonJSES modulesTypeScript const { GenzyApi, GenzyContainer } = require(&quot;@genzy/api&quot;); const container = new GenzyContainer().addLocalServices(/* services */); const app = new GenzyApi().from(container); app.listen(3000);  This implicitly starts a Express Application. "},{"title":"With an existing Express Application​","type":1,"pageTitle":"Server Initialization","url":"docs/0.0.1-alpha/server-initialization/#with-an-existing-express-application","content":"CommonJSES modulesTypeScript const express = require(&quot;express&quot;); const { GenzyApi, GenzyContainer } = require(&quot;@genzy/api&quot;); const container = new GenzyContainer().addLocalServices(/* services */); const existingApp = express(); const app = new GenzyApi({ app: existingApp }).from(container); existingApp.listen(3000);  caution Using app.listen(3000) will not work here, as it creates a new HTTP server. "},{"title":"Options​","type":1,"pageTitle":"Server Initialization","url":"docs/0.0.1-alpha/server-initialization/#options","content":"The complete list of available options can be found here. "},{"title":"Route Configuration","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/service-class-routes-config/","content":"Route Configuration If you'd like the service, and its methods to be registered on a different route paths and http methods from the default ones, you can customize them in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/' }, getById: { httpMethod: 'GET', path: '/:id' }, add: { httpMethod: 'POST', path: '/' }, update: { httpMethod: 'PUT', path: '/' }, delete: { httpMethod: 'DELETE', path: '/:id' }, } async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(example) { return example; } async delete(id) { return { id }; } } info Using :parameterName in the route path registers a positional path parameter. info Configuration must be used both on the client and the server side, since it is used for telling Genzy how and where to send the requests, or register the API routes.","keywords":""},{"title":"Types Configuration","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/service-class-types-config/","content":"Types Configuration If you'd like Genzy to be able to generate a detailed OpenAPI documentation, with SwaggerUI that includes Type Definitions, you can define types in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript const exampleTypeDefinition = { $typeName: &quot;Example&quot;, $isArray: false, name: &quot;string&quot;, age: &quot;number&quot; }; const exampleArrayTypeDefinition = { ...exampleTypeDefinition, $isArray: true, }; class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/', params: [ { source: 'query', name: &quot;pageNumber&quot;, type: 'string' }, { source: 'query', name: &quot;pageSize&quot;, type: 'string' }, ], result: exampleArrayTypeDefinition }, getById: { httpMethod: 'GET', path: '/:id', params: [ { source: 'query', name: &quot;includeDetails&quot;, type: 'boolean' } { source: 'path', name: 'id', type: 'string' }, ], result: exampleTypeDefinition }, add: { httpMethod: 'POST', path: '/', params: [ { source: 'body', name: 'example', type: exampleTypeDefinition } ], result: exampleTypeDefinition }, update: { httpMethod: 'PUT', path: '/:id', params: [ { source: 'path', name: 'id', type: 'string' }, { source: 'body', name: 'example', type: exampleTypeDefinition } ], result: exampleTypeDefinition }, delete: { httpMethod: 'DELETE', path: '/:id', params: [ { source: 'path', name: 'id', type: 'string' }, ], result: exampleTypeDefinition }, } async getAll(pageNumber, pageSize) { return []; } async getById(includeDetails, id) { return []; } async add(example) { return example; } async update(id, example) { return example; } async delete(id) { return { id }; } } info Types configuration is used at the server side, since it is used for telling Genzy how to set up a detailed OpenAPI documentation, with SwaggerUI that includes Type Definitions.","keywords":""},{"title":"Parameter Configuration","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/service-class-params-config/","content":"Parameter Configuration If you'd like the service methods to be able to receive query and/or path parameters, you can customize them in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/', params: [ { source: 'query', name: &quot;pageNumber&quot; }, { source: 'query', name: &quot;pageSize&quot; }, ] }, getById: { httpMethod: 'GET', path: '/:id', params: [ { source: 'query', name: &quot;includeDetails&quot; } { source: 'path', name: 'id' }, ] }, add: { httpMethod: 'POST', path: '/', params: [ { source: 'body', name: 'example' } ] }, update: { httpMethod: 'PUT', path: '/:id', params: [ { source: 'path', name: 'id' }, { source: 'body', name: 'example' } ] }, delete: { httpMethod: 'DELETE', path: '/:id', params: [ { source: 'path', name: 'id' }, ] }, } async getAll(pageNumber, pageSize) { return []; } async getById(includeDetails, id) { return []; } async add(example) { return example; } async update(id, example) { return example; } async delete(id) { return { id }; } } info Configuration must be used both on the client and the server side, since it is used for telling Genzy how and where to send the requests, or register the API routes.","keywords":""},{"title":"Service class","type":0,"sectionRef":"#","url":"docs/0.0.1-alpha/service-class/","content":"","keywords":""},{"title":"What Service class is​","type":1,"pageTitle":"Service class","url":"docs/0.0.1-alpha/service-class/#what-service-class-is","content":"Service class is a JavaScript class that implements an arbitrary piece of business logic. It's methods can have parameters, and can also return results. Genzy can generate a Web API or an HTTP Client from any Service Class. "},{"title":"Plain​","type":1,"pageTitle":"Service class","url":"docs/0.0.1-alpha/service-class/#plain","content":"Plain JavaScript classes can be used. CommonJSES modulesTypeScript class ExampleService { async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(example) { return example; } async delete(id) { return { id }; } }  "},{"title":"Configured​","type":1,"pageTitle":"Service class","url":"docs/0.0.1-alpha/service-class/#configured","content":"If you'd like the service, and its methods to be registered on a different route path from the default ones, you can customize them in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/' }, getById: { httpMethod: 'GET', path: '/:id' }, add: { httpMethod: 'POST', path: '/' }, update: { httpMethod: 'PUT', path: '/' }, delete: { httpMethod: 'DELETE', path: '/:id' }, } async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(example) { return example; } async delete(id) { return { id }; } }  info Configuration must be used both on the client and the server side, since it is used for telling Genzy how and where to send the requests, or register the API routes. "}]