[{"title":"Client Installation","type":0,"sectionRef":"#","url":"docs/v1/client-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#installation","content":"To install the latest release: NPMYarn npm install @genzy/client Copy To install a specific version: NPMYarn npm install @genzy/client@version Copy "},{"title":"Miscellaneous​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#miscellaneous","content":""},{"title":"Dependency tree​","type":1,"pageTitle":"Client Installation","url":"docs/v1/client-installation/#dependency-tree","content":"A basic installation of the client includes 2 packages: @genzy/client@1.2.3 ├── axios@0.24.0 └── blueimp-tmpl@3.20.0 Copy "},{"title":"CLI Usage","type":0,"sectionRef":"#","url":"docs/v1/cli-usage/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"CLI Usage","url":"docs/v1/cli-usage/#prerequisites","content":"You need to have installed the @genzy/cli library in your project. "},{"title":"Syntax​","type":1,"pageTitle":"CLI Usage","url":"docs/v1/cli-usage/#syntax","content":"The syntax for generating the client code is simple, you need to run the genzy -l &lt;language&gt; -h &lt;host&gt; -o &lt;output_dir&gt; library and pass the following arguments: genzy -h - for help-l - language ts - generates the TypeScript client. js - generates the JavaScript client. -h - the url of the Genzy deployment.-o - the path of the directory (existing or new) in which the client files will be stored. "},{"title":"Generating the Client​","type":1,"pageTitle":"CLI Usage","url":"docs/v1/cli-usage/#generating-the-client","content":""},{"title":"TypeScript​","type":1,"pageTitle":"CLI Usage","url":"docs/v1/cli-usage/#typescript","content":"genzy -l ts -h http://localhost:3000 -o ./path/to/output/dir/ Copy "},{"title":"JavaScript​","type":1,"pageTitle":"CLI Usage","url":"docs/v1/cli-usage/#javascript","content":"genzy -l js -h http://localhost:3000 -o ./path/to/output/dir/ Copy "},{"title":"CLI Installation","type":0,"sectionRef":"#","url":"docs/v1/cli-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"CLI Installation","url":"docs/v1/cli-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"CLI Installation","url":"docs/v1/cli-installation/#installation","content":"To install the latest release: NPMYarn npm install -g @genzy/cli Copy To install a specific version: NPMYarn npm install -g @genzy/cli@version Copy "},{"title":"Client Initialization","type":0,"sectionRef":"#","url":"docs/v1/client-initialization/","content":"","keywords":""},{"title":"Initialization​","type":1,"pageTitle":"Client Initialization","url":"docs/v1/client-initialization/#initialization","content":""},{"title":"Standalone​","type":1,"pageTitle":"Client Initialization","url":"docs/v1/client-initialization/#standalone","content":"CommonJSES modulesTypeScript const { GenzyContainer } = require(&quot;@genzy/client&quot;); class ExampleService { async get() {} } const container = new GenzyContainer().addRemoteService(&quot;http://localhost:3000&quot;, ExampleService); const { exampleService } = nimble.getAllServices(); Copy "},{"title":"Options​","type":1,"pageTitle":"Client Initialization","url":"docs/v1/client-initialization/#options","content":"The complete list of available options can be found here. "},{"title":"Client API","type":0,"sectionRef":"#","url":"docs/v1/client-api/","content":"","keywords":""},{"title":"Reference​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#reference","content":"The following is the GenzyContainer class with all method signatures. export class GenzyContainer { constructor(); public addLocalService(type: Constructor): GenzyContainer; public addLocalServices(...types: Constructor): GenzyContainer; public addRemoteService(origin: string, type: Constructor): GenzyContainer; public addRemoteServices(origin: string, ...types: Constructor): GenzyContainer; public interceptCalls(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyContainer; public interceptResults(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyContainer; public interceptAllCalls(callback: InterceptorCallback): GenzyContainer; public interceptAllResults(callback: InterceptorCallback): GenzyContainer; public getAllServices(): any; } Copy "},{"title":"new GenzyContainer()​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#new-genzycontainer","content":"Creates a new instance of GenzyContainer. "},{"title":"nimble.addLocalService(type)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleaddlocalservicetype","content":"Registers a local service class to the nimble. type &lt;Constructor&gt; "},{"title":"nimble.addLocalServices(types)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleaddlocalservicestypes","content":"Registers local service classes to the nimble. types &lt;Constructor&gt;[] "},{"title":"nimble.addRemoteService(origin, type)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleaddremoteserviceorigin-type","content":"Registers a remote service class to the nimble. origin &lt;string&gt; type &lt;Constructor&gt; Registers remote service classes to the nimble. origin &lt;string&gt; types &lt;Constructor&gt;[] "},{"title":"nimble.interceptCalls(interceptors)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptcallsinterceptors","content":"Registers a set of custom Client interceptors that execute before each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimble.interceptResults(interceptors)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptresultsinterceptors","content":"Registers a set of custom Client interceptors that execute after each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"nimble.interceptAllCalls(callback)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptallcallscallback","content":"Registers a custom Client interceptor that executes before all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimble.interceptAllResults(callback)​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimbleinterceptallresultscallback","content":"Registers a custom Client interceptor that executes after all requests. callback &lt;InterceptorCallback&gt; "},{"title":"nimble.getAllServices()​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#nimblegetallservices","content":"Returns GenzyContainer's service registry. "},{"title":"Types​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#types","content":""},{"title":"Constructor​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#constructor","content":"interface Constructor { new (...args: any[]); } Copy "},{"title":"GenzyInfo​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#genzyinfo","content":"type GenzyInfo = { version?: string; name?: string; description?: string; basePath?: string; } Copy "},{"title":"InterceptorCallback​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#interceptorcallback","content":"type InterceptorCallback = ({setHeader, getHeader, setBody, getBody}: {setHeader: (key: string, value: string) =&gt; any, getHeader: (key: string) =&gt; string, setBody: (body: any) =&gt; any, getBody: () =&gt; any}) =&gt; any; Copy "},{"title":"CustomInterceptors​","type":1,"pageTitle":"Client API","url":"docs/v1/client-api/#custominterceptors","content":"type CustomInterceptors&lt;TInterceptorCallback&gt; = { [classKey: string]: { [methodKey: string]: TInterceptorCallback } }; Copy "},{"title":"API Interceptors","type":0,"sectionRef":"#","url":"docs/v1/api-interceptors/","content":"","keywords":""},{"title":"Intercept All Before​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-all-before","content":"// Intercept all service handlers before they are called const usersGenzyContainer = new GenzyContainer().ofLocal(UserService); const app = new GenzyApi() .interceptAll((req: Request, res: Response, next: NextFunction) =&gt; { if(isTokenValid(req.headers.Authorization)) next(); else res.sendStatus(401); }) .from(usersGenzyContainer); Copy "},{"title":"Intercept Specific Before​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-before","content":"// Intercept specific service handlers before they are called const usersGenzyContainer = new GenzyContainer().ofLocal(UserService); const app = new GenzyApi() .intercept({ userService: { createUser: (req: Request, res: Response, next: NextFunction) =&gt; { if(isAdminUser(req.headers.Authorization)) next(); else res.sendStatus(401); } } }) .from(usersGenzyContainer); Copy "},{"title":"Intercept Specific Before - Interceptor Class​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-before---interceptor-class","content":"// Intercept specific service handlers before they are called with Interceptor class class UserServiceInterceptor { createUser(req: Request, res: Response, next: NextFunction) { if(isAdminUser(req.headers.Authorization)) next(); else res.sendStatus(401); } } const usersGenzyContainer = new GenzyContainer().ofLocal(UserService); const app = new GenzyApi() .intercept({ userService: { createUser: UserServiceInterceptor } }) .from(usersGenzyContainer); Copy "},{"title":"Intercept All After​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-all-after","content":"// Intercept all service handlers after they are called const usersGenzyContainer = new GenzyContainer().ofLocal(UserService); const app = new GenzyApi() .interceptAllAfter((req: Request, res: Response, next: NextFunction) =&gt; { res.body({ message: &quot;Hello from Genzy.&quot; }); }) .from(usersGenzyContainer); Copy "},{"title":"Intercept Specific After​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-after","content":"// Intercept specific service handlers after they are called const usersGenzyContainer = new GenzyContainer().ofLocal(UserService); const app = new GenzyApi() .interceptAfter({ userService: { createUser: (req: Request, res: Response, next: NextFunction) =&gt; { res.status(201); next(); } } }) .from(usersGenzyContainer); Copy "},{"title":"Intercept Specific After - Interceptor Class​","type":1,"pageTitle":"API Interceptors","url":"docs/v1/api-interceptors/#intercept-specific-after---interceptor-class","content":"// Intercept specific service handlers after they are called with Interceptor class class UserServiceInterceptor { createUser(req: Request, res: Response, next: NextFunction) { res.status(201); next(); } } const usersGenzyContainer = new GenzyContainer().ofLocal(UserService); const app = new GenzyApi() .interceptAfter({ userService: { createUser: UserServiceInterceptor } }) .from(usersGenzyContainer); Copy "},{"title":"Client Interceptors","type":0,"sectionRef":"#","url":"docs/v1/client-interceptors/","content":"","keywords":""},{"title":"Intercept All Before​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-all-before","content":"// Intercept all service calls const usersGenzyContainer = new GenzyContainer() .ofRemote(UserService, host) .interceptAllCalls(({setHeader, getHeader, setBody, getBody}) =&gt; { setHeader('Authorization', 'Bearer &lt;token&gt;'); }); Copy "},{"title":"Intercept Specific Before​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-before","content":"// Intercept only specific method calls const usersGenzyContainer = new GenzyContainer() .ofRemote(UserService, host) .interceptCalls({ userService: { getTest({setHeader, getHeader, setBody, getBody}) { setBody({ ...getBody(), timestamp: new Date() }); } } }); Copy "},{"title":"Intercept Specific Before - Interceptor Class​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-before---interceptor-class","content":"// Define interceptors with an interceptor class class UserServiceCallInterceptor { getTest({setHeader, getHeader, setBody, getBody}) { setHeader('classCallInterceptor', 'Works!') } } const usersGenzyContainer = new GenzyContainer() .ofRemote(UserService, host) .interceptCalls({ userService: UserServiceCallInterceptor }); Copy "},{"title":"Intercept All After​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-all-after","content":"// Intercept all service results const usersGenzyContainer = new GenzyContainer() .ofRemote(UserService, host) .interceptAllResults(({setHeader, getHeader, setBody, getBody}) =&gt; { validateBody(getBody()); setToken(getHeader('Token')); }); Copy "},{"title":"Intercept Specific After​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-after","content":"// Intercept only specific method results const usersGenzyContainer = new GenzyContainer() .ofRemote(UserService, host) .interceptResults({ userService: { getTest({setHeader, getHeader, setBody, getBody}) { setBody({ ...getBody(), count: getBody().items.length }); } } }); Copy "},{"title":"Intercept Specific After - Interceptor Class​","type":1,"pageTitle":"Client Interceptors","url":"docs/v1/client-interceptors/#intercept-specific-after---interceptor-class","content":"// Define interceptors with an interceptor class class UserServiceResultInterceptor { getTest({setHeader, getHeader, setBody, getBody}) { setHeader('classResultInterceptor', 'Works!') } } const usersGenzyContainer = new GenzyContainer() .ofRemote(UserService, host) .interceptResults({ userService: UserServiceResultInterceptor }); Copy "},{"title":"How it works","type":0,"sectionRef":"#","url":"docs/v1/how-it-works/","content":"How it works Under the hood, Genzy is using JavaScript's Proxy API to intercept all method calls and gather the required information for registring the routes. Genzy keeps all services in it's own internal service registry, and implements Dependency Inversion principle. The registry contains all services from a GenzyContainer, and is injected as a first parameter of every service constructor. Client is using Axios for sending HTTP requests. Server is using Express for creating a web API. It implements the custom logic for creating OpenAPI documentation based on the information gathered from the GenzyContainer services. SwaggerUI is created using the swagger-ui-express library.","keywords":""},{"title":"Server Installation","type":0,"sectionRef":"#","url":"docs/v1/server-installation/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#prerequisites","content":"Please make sure that Node.js is installed on your system. The current Long Term Support (LTS) release is an ideal starting point, see here. info At least Node.js 10 is needed, older versions are not supported anymore. "},{"title":"Installation​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#installation","content":"To install the latest release: NPMYarn npm install @genzy/api Copy To install a specific version: NPMYarn npm install @genzy/api@version Copy "},{"title":"Miscellaneous​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#miscellaneous","content":""},{"title":"Dependency tree​","type":1,"pageTitle":"Server Installation","url":"docs/v1/server-installation/#dependency-tree","content":"A basic installation of the server includes 4 packages: @genzy/api@1.2.3 ├── cors@2.8.5 ├── express@4.17.1 ├── @genzy/client@1.2.0 └── swagger-ui-express@4.3.0 Copy "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/v1/","content":"","keywords":""},{"title":"What Genzy is​","type":1,"pageTitle":"Introduction","url":"docs/v1/#what-genzy-is","content":"Genzy is a JavaScript library that enables rapid development of web applications. It is built on top of the Express framework and provides additional features like automatic routes registration, client code generation and OpenAPI documentation, along with SwaggerUI. Here's a basic example: CommonJSES modulesTypeScript Server​ const { GenzyContainer, GenzyApi } = require('@genzy/api'); class UserService { async createUser(user) { // logic for adding the user return user; } } class AccountService { // UserService is automatically injected constructor({ userService }) { this.userService = userService; } async getAllAccounts() { return []; } // take accountInfo object as parameter async createAccount({username}) { // logic for adding the account const newAccount = {id: 1, username}; // call another service this.userService.createUser({ accountId: newAccount.id }) return newAccount; } } const usersGenzyContainer = new GenzyContainer() .addLocalServices(UserService, AccountService); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000); Copy CommonJSES modulesTypeScript Client​ const { GenzyContainer } = require('@genzy/client'); const host = 'http://localhost:3000'; class UserService { async createUser(user) {} } class AccountService { async getAllAccounts() {} async createAccount(account) {} } const usersGenzyContainer = new GenzyContainer() .addRemoteServices(host, UserService, AccountService); // The instances are available for custom usage const { userService, accountService } = usersGenzyContainer.getAllServices(); // Use the services accountService.createAccount({ username: 'test', }) .then(newAccount =&gt; console.log(newAccount)) // created account from server .catch(error =&gt; console.log(error)); // Fetch all accounts const allAccounts = await accountService.getAllAccounts(); Copy "},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"docs/v1/#features","content":"Here are the features provided by Genzy: "},{"title":"API​","type":1,"pageTitle":"Introduction","url":"docs/v1/#api","content":"Express Application is automatically created based on the service classes passed to the GenzyContainer. "},{"title":"Client​","type":1,"pageTitle":"Introduction","url":"docs/v1/#client-3","content":"Client service proxy is automatically created based on the service classes passed to the GenzyContainer. "},{"title":"Automatic JS/TS Client generation​","type":1,"pageTitle":"Introduction","url":"docs/v1/#automatic-jsts-client-generation","content":"@genzy/client package can be used to auto-generate client service files for the existing API. "},{"title":"Interceptors​","type":1,"pageTitle":"Introduction","url":"docs/v1/#interceptors","content":"Both Server and Client support defining interceptors. Most common use case for interceptors is handling Authorization, where the client sends a secret with an identity and the server validates it. "},{"title":"Automatic OpenAPI docs​","type":1,"pageTitle":"Introduction","url":"docs/v1/#automatic-openapi-docs","content":"Server automatically builds OpenAPI documentation, and serves SwaggerUI on route /explorer. "},{"title":"Next steps​","type":1,"pageTitle":"Introduction","url":"docs/v1/#next-steps","content":"Server installationClient installation "},{"title":"Server API","type":0,"sectionRef":"#","url":"docs/v1/server-api/","content":"","keywords":""},{"title":"Reference​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#reference","content":"The following is the GenzyApi class with all method signatures. export class GenzyApi { constructor(); constructor(options: {app?: Application, genzyInfo?: GenzyInfo, basePath?: string}); public intercept(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyApi; public interceptAfter(customInterceptors: CustomInterceptors&lt;InterceptorCallback&gt;): GenzyApi; public interceptAll(callback: InterceptorCallback): GenzyApi; public interceptAllAfter(callback: InterceptorCallback): GenzyApi; public withErrors(errors: ErrorRegistry): GenzyApi; public from(containers: GenzyContainer[]): Application; } Copy "},{"title":"new GenzyApi(options)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#new-genzyapioptions","content":"Creates a new instance of GenzyApi. options &lt;Object&gt; app? &lt;Application&gt; genzyInfo? &lt;GenzyInfo&gt; basePath? &lt;string&gt; "},{"title":"genzyApi.from(containers)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#genzyapifromcontainers","content":"Creates a new Express Application from a set of GenzyContainers. nimbles &lt;Array&gt; "},{"title":"genzyApi.intercept(interceptors)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#genzyapiinterceptinterceptors","content":"Registers a set of custom API interceptors that execute before each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"genzyApi.interceptAfter(interceptors)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#genzyapiinterceptafterinterceptors","content":"Registers a set of custom API interceptors that execute after each request. interceptors &lt;CustomInterceptors&gt; "},{"title":"genzyApi.interceptAll(callback)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#genzyapiinterceptallcallback","content":"Registers a custom API interceptor that executes before all requests. callback &lt;InterceptorCallback&gt; "},{"title":"genzyApi.interceptAllAfter(callback)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#genzyapiinterceptallaftercallback","content":"Registers a custom API interceptor that executes after all requests. callback &lt;InterceptorCallback&gt; "},{"title":"genzyApi.withErrors(errorRegistry)​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#genzyapiwitherrorserrorregistry","content":"Registers a set of custom error status codes that set the response status based on the error that is thrown. errorRegistry &lt;ErrorRegistry&gt; "},{"title":"Types​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#types","content":""},{"title":"GenzyInfo​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#genzyinfo","content":"type GenzyInfo = { version?: string; name?: string; description?: string; basePath?: string; } Copy "},{"title":"InterceptorCallback​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#interceptorcallback","content":"type InterceptorCallback = (req: Request, res: Response, next: NextFunction) =&gt; any; Copy "},{"title":"CustomInterceptors​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#custominterceptors","content":"type CustomInterceptors&lt;TInterceptorCallback&gt; = { [classKey: string]: { [methodKey: string]: TInterceptorCallback } }; Copy "},{"title":"ErrorRegistry​","type":1,"pageTitle":"Server API","url":"docs/v1/server-api/#errorregistry","content":"type ErrorRegistry = { [key: string]: number }; Copy "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/v1/getting-started/","content":"","keywords":""},{"title":"Setting up the server​","type":1,"pageTitle":"Getting Started","url":"docs/v1/getting-started/#setting-up-the-server","content":"Initialize the project npm init -y Copy Install @genzy/api library npm i -S @genzy/api Copy Implement Example service // example.ts import { Controller, Get, Post, Put, Delete, Query, Path, Body, string, number, boolean, type, Returns, ReturnsArrayOf, } from &quot;@genzy/api&quot;; class Example { @string() name: string; @number age: number; } @Controller(&quot;/examples&quot;) export class ExampleService { @Get() @ReturnsArrayOf(Example) async getAll( @Query(&quot;pageNumber&quot;) @number pageNumber: number, @Query(&quot;pageSize&quot;) @number pageSize: number ): Promise&lt;Example[]&gt; { return []; } @Get(&quot;/:id&quot;) @Returns(Example) async getById( @Query(&quot;includeDetails&quot;) @boolean includeDetails: boolean, @Path(&quot;id&quot;) @string() id: string ): Promise&lt;Example&gt; { return; } @Post() @Returns(Example) async add(@Body() @type(Example) example: Example): Promise&lt;Example&gt; { return example; } @Put(&quot;/:id&quot;) @Returns(Example) async update( @Path(&quot;id&quot;) @string() id: string, @Body() @type(Example) example: Example ): Promise&lt;Example&gt; { return example; } @Delete(&quot;/:id&quot;) @Returns(Example) async delete(@Path(&quot;id&quot;) @string() id: string): Promise&lt;Example&gt; { return; } } Copy Create a GenzyContainer of services and the GenzyApi // index.ts import { GenzyContainer, GenzyApi } from &quot;@genzy/api&quot;; import { ExampleService } from &quot;./example&quot;; const container = new GenzyContainer().ofLocal(ExampleService); const api = new GenzyApi({ genzyInfo: { name: &quot;Example Microservice&quot;, version: &quot;1.0.0&quot;, description: &quot;This is an example microservice.&quot;, }, }).from(container); const PORT = 3000; api.listen(PORT, () =&gt; console.log(`Started listening on ${PORT}`)); type GenzyContainerServices = { exampleService: ExampleService; }; // The instances are available for custom usage const { exampleService } = usersGenzyContainer.services(); Copy 5 routes have been registered GET /api/examplesGET /api/examples/{id}POST /api/examplesPUT /api/examples/{id}DELETE /api/examples/{id} ::: Setting up the client​ Initialize the project npm init -y Copy Install @genzy/client library npm i -S @genzy/client Copy Install @genzy/cli CLI npm i -g @genzy/cli Copy Generate TypeScript client code genzy -l ts -h http://localhost:3000 -o ./services/example Copy services/example/index.tsservices/example/ExampleService.ts ::: // services/example/index.ts // Auto-generated by Genzy Client CLI import { GenzyContainer } from &quot;@genzy/client&quot;; import { ExampleService as ExampleServiceLocal } from &quot;./ExampleService&quot;; const host = &quot;http://localhost:3000&quot;; export type GenzyContainerServices = { exampleService: ExampleServiceLocal; }; export const { exampleService }: GenzyContainerServices = new GenzyContainer() .ofRemote(ExampleServiceLocal, host) .services(); Copy // services/example/ExampleService.ts // Auto-generated by Genzy Client CLI import { Controller, Get, Post, Put, Delete, Query, Path, Body, } from &quot;@genzy/client&quot;; export class Example { name: string; age: number; } @Controller(&quot;/examples&quot;) export class ExampleService { @Get(&quot;/&quot;) async getAll( @Query(&quot;pageNumber&quot;) pageNumber: number, @Query(&quot;pageSize&quot;) pageSize: number ) {} @Get(&quot;/:id&quot;) async getById( @Query(&quot;includeDetails&quot;) includeDetails: string, @Path(&quot;id&quot;) id: boolean ) {} @Post(&quot;/&quot;) async add(@Body() body: Example) {} @Put(&quot;/:id&quot;) async update(@Path(&quot;id&quot;) id: string, @Body() body: Example) {} @Delete(&quot;/:id&quot;) async delete(@Path(&quot;id&quot;) id: string) {} } Copy Use the ExampleService elsewhere // somewhere.ts import { exampleService } from &quot;./services/example&quot;; exampleService.getAll().then(console.log).catch(console.log); Copy "},{"title":"GenzyContainer","type":0,"sectionRef":"#","url":"docs/v1/genzy-container/","content":"","keywords":""},{"title":"What Nibmle is​","type":1,"pageTitle":"GenzyContainer","url":"docs/v1/genzy-container/#what-nibmle-is","content":"GenzyContainer holds a set of related service classes. It is responsible for handling their lifecycle and managing their dependencies. GenzyContainer can hold Local or Remote services. "},{"title":"Local Services​","type":1,"pageTitle":"GenzyContainer","url":"docs/v1/genzy-container/#local-services","content":"Local services are ones that are running in the same process as GenzyContainer. CommonJSES modulesTypeScript const { GenzyContainer } = require(&quot;@genzy/client&quot;); // or &quot;@genzy/api&quot; class UserService { async getAll() { return []; } } class AccountService { constructor({ userService }) { this.userService = userService; } async getAll() { const accounts = []; const users = await this.userService.getAll(); return users.map(user =&gt; ({ ...user, account: accounts.find(acc =&gt; acc.id === user.accountId) })); } } // Creating the GenzyContainer const container = new GenzyContainer().addLocalServices(UserService, AccountService); // Getting the services out of the GenzyContainer. const { accountService } = nimble.getAllServices(); Copy "},{"title":"Remote Services​","type":1,"pageTitle":"GenzyContainer","url":"docs/v1/genzy-container/#remote-services","content":"Remote services are, as the name suggests, running in a different process, or on a different server. Methods of a remote service, that is in a GenzyContainer do not require any implementation code, but do require the URL of the server they are running on. CommonJSES modulesTypeScript const { GenzyContainer } = require(&quot;@genzy/client&quot;); // or &quot;@genzy/api&quot; class UserService { async getAll() {} } class AccountService { async getAll() {} } // Creating the GenzyContainer const container = new GenzyContainer() .addRemoteServices(&quot;http://localhost:3000&quot;, UserService, AccountService); // Getting the services out of the GenzyContainer. const { accountService } = nimble.getAllServices(); Copy GenzyContainer implicitly creates a Proxy for each service that gets the results of method calls over HTTP. "},{"title":"Server Initialization","type":0,"sectionRef":"#","url":"docs/v1/server-initialization/","content":"","keywords":""},{"title":"Initialization​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#initialization","content":""},{"title":"Standalone​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#standalone","content":"CommonJSES modulesTypeScript const { GenzyApi, GenzyContainer } = require('@genzy/api'); const container = new GenzyContainer().addLocalServices(/* services */); const app = new GenzyApi().from(container); app.listen(3000); Copy This implicitly starts a Express Application. "},{"title":"With an existing Express Application​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#with-an-existing-express-application","content":"CommonJSES modulesTypeScript const express = require(&quot;express&quot;); const { GenzyApi, GenzyContainer } = require('@genzy/api'); const container = new GenzyContainer().addLocalServices(/* services */); const existingApp = express(); const app = new GenzyApi({ app: existingApp }).from(container); existingApp.listen(3000); Copy caution Using app.listen(3000) will not work here, as it creates a new HTTP server. "},{"title":"Options​","type":1,"pageTitle":"Server Initialization","url":"docs/v1/server-initialization/#options","content":"The complete list of available options can be found here. "},{"title":"Parameter Configuration","type":0,"sectionRef":"#","url":"docs/v1/service-class-params-config/","content":"Parameter Configuration If you'd like the service methods to be able to receive query and/or path parameters, you can customize them in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/', params: [ { source: 'query', name: &quot;pageNumber&quot; }, { source: 'query', name: &quot;pageSize&quot; }, ] }, getById: { httpMethod: 'GET', path: '/:id', params: [ { source: 'query', name: &quot;includeDetails&quot; } { source: 'path', name: 'id' }, ] }, add: { httpMethod: 'POST', path: '/', params: [ { source: 'body', name: 'example' } ] }, update: { httpMethod: 'PUT', path: '/:id', params: [ { source: 'path', name: 'id' }, { source: 'body', name: 'example' } ] }, delete: { httpMethod: 'DELETE', path: '/:id', params: [ { source: 'path', name: 'id' }, ] }, } async getAll(pageNumber, pageSize) { return []; } async getById(includeDetails, id) { return []; } async add(example) { return example; } async update(id, example) { return example; } async delete(id) { return { id }; } } Copy important Configuration must be used both on the client and the server side, since it is used for telling Genzy how and where to send the requests, or register the API routes.","keywords":""},{"title":"Route Configuration","type":0,"sectionRef":"#","url":"docs/v1/service-class-routes-config/","content":"Route Configuration If you'd like the service, and its methods to be registered on a different route paths and http methods from the default ones, you can customize them in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/' }, getById: { httpMethod: 'GET', path: '/:id' }, add: { httpMethod: 'POST', path: '/' }, update: { httpMethod: 'PUT', path: '/' }, delete: { httpMethod: 'DELETE', path: '/:id' }, } async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(example) { return example; } async delete(id) { return { id }; } } Copy info Using :parameterName in the route path registers a positional path parameter. important Configuration must be used both on the client and the server side, since it is used for telling Genzy how and where to send the requests, or register the API routes.","keywords":""},{"title":"Service class","type":0,"sectionRef":"#","url":"docs/v1/service-class/","content":"","keywords":""},{"title":"What Service class is​","type":1,"pageTitle":"Service class","url":"docs/v1/service-class/#what-service-class-is","content":"Service class is a JavaScript class that implements an arbitrary piece of business logic. It's methods can have parameters, and can also return results. Genzy can generate a Web API or an HTTP Client from any Service Class. "},{"title":"Plain​","type":1,"pageTitle":"Service class","url":"docs/v1/service-class/#plain","content":"Plain JavaScript classes can be used. CommonJSES modulesTypeScript class ExampleService { async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(example) { return example; } async delete(id) { return { id }; } } Copy "},{"title":"Configured​","type":1,"pageTitle":"Service class","url":"docs/v1/service-class/#configured","content":"If you'd like the service, and its methods to be registered on a different route path from the default ones, you can customize them in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/' }, getById: { httpMethod: 'GET', path: '/:id' }, add: { httpMethod: 'POST', path: '/' }, update: { httpMethod: 'PUT', path: '/' }, delete: { httpMethod: 'DELETE', path: '/:id' }, } async getAll() { return []; } async getById(id) { return []; } async add(example) { return example; } async update(example) { return example; } async delete(id) { return { id }; } } Copy important Configuration must be used both on the client and the server side, since it is used for telling Genzy how and where to send the requests, or register the API routes. "},{"title":"GenzyApi","type":0,"sectionRef":"#","url":"docs/v1/genzy-api/","content":"","keywords":""},{"title":"What GenzyApi is​","type":1,"pageTitle":"GenzyApi","url":"docs/v1/genzy-api/#what-genzyapi-is","content":"GenzyApi is responsible for automatically creating a RestAPI from a set of GenzyContainers. It is also responsible for automatically building OpenAPI documentation, and serving SwaggerUI on route /explorer. "},{"title":"Creating an API​","type":1,"pageTitle":"GenzyApi","url":"docs/v1/genzy-api/#creating-an-api","content":""},{"title":"From Plain Local Services​","type":1,"pageTitle":"GenzyApi","url":"docs/v1/genzy-api/#from-plain-local-services","content":"CommonJSES modulesTypeScript const { GenzyContainer, GenzyApi } = require(&quot;@genzy/api&quot;); class UserService { async createUser(user) { return user; } } class AccountService { async getAllAccounts() { return []; } } const usersGenzyContainer = new GenzyContainer().addLocalServices( UserService, AccountService ); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000); Copy  "},{"title":"From Plain Remote Services​","type":1,"pageTitle":"GenzyApi","url":"docs/v1/genzy-api/#from-plain-remote-services","content":"info An API can also be generated from a set of remote services, so that the API acts as an API Gateway. CommonJSES modulesTypeScript const { GenzyContainer, GenzyApi } = require(&quot;@genzy/api&quot;); class UserService { async createUser(user) {} } class AccountService { async getAllAccounts() {} } const usersGenzyContainer = new GenzyContainer().addRemoteServices( &quot;http://localhost:3000&quot;, UserService, AccountService ); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000); Copy  "},{"title":"From Configured Local Services​","type":1,"pageTitle":"GenzyApi","url":"docs/v1/genzy-api/#from-configured-local-services","content":"CommonJSES modulesTypeScript const { GenzyContainer, GenzyApi } = require(&quot;@genzy/api&quot;); class UserService { $genzy = { path: &quot;/users&quot;, createUser: { httpMethod: &quot;POST&quot;, path: &quot;/&quot;, params: [{ name: &quot;user&quot;, source: &quot;body&quot; }], }, }; async createUser(user) { return user; } } class AccountService { $genzy = { path: &quot;/accounts&quot;, getAllAccounts: { method: &quot;GET&quot;, path: &quot;/&quot;, }, }; async getAllAccounts() { return []; } } const usersGenzyContainer = new GenzyContainer().addLocalServices( UserService, AccountService ); const app = new GenzyApi().from(usersGenzyContainer); app.listen(3000); Copy  "},{"title":"Types Configuration","type":0,"sectionRef":"#","url":"docs/v1/service-class-types-config/","content":"Types Configuration If you'd like Genzy to be able to generate a detailed OpenAPI documentation, with SwaggerUI that includes Type Definitions, you can define types in a $genzy property. If you're using TypeScript you can define configuration using TypeScript decorators. note If you're using decorators, make sure that you've set &quot;experimentalDecorators&quot; option to true in your tsconfig.json file. CommonJSES modulesTypeScript const exampleTypeDefinition = { $typeName: &quot;Example&quot;, $isArray: false, name: &quot;string&quot;, age: &quot;number&quot; }; const exampleArrayTypeDefinition = { ...exampleTypeDefinition, $isArray: true, }; class ExampleService { $genzy = { path: '/', getAll: { httpMethod: 'GET', path: '/', params: [ { source: 'query', name: &quot;pageNumber&quot;, type: 'string' }, { source: 'query', name: &quot;pageSize&quot;, type: 'string' }, ], result: exampleArrayTypeDefinition }, getById: { httpMethod: 'GET', path: '/:id', params: [ { source: 'query', name: &quot;includeDetails&quot;, type: 'boolean' } { source: 'path', name: 'id', type: 'string' }, ], result: exampleTypeDefinition }, add: { httpMethod: 'POST', path: '/', params: [ { source: 'body', name: 'example', type: exampleTypeDefinition } ], result: exampleTypeDefinition }, update: { httpMethod: 'PUT', path: '/:id', params: [ { source: 'path', name: 'id', type: 'string' }, { source: 'body', name: 'example', type: exampleTypeDefinition } ], result: exampleTypeDefinition }, delete: { httpMethod: 'DELETE', path: '/:id', params: [ { source: 'path', name: 'id', type: 'string' }, ], result: exampleTypeDefinition }, } async getAll(pageNumber, pageSize) { return []; } async getById(includeDetails, id) { return []; } async add(example) { return example; } async update(id, example) { return example; } async delete(id) { return { id }; } } Copy important Types configuration is used at the server side, since it is used for telling Genzy how to set up a detailed OpenAPI documentation, with SwaggerUI that includes Type Definitions.","keywords":""}]