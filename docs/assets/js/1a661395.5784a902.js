"use strict";(self.webpackChunk_genzy_io_docs=self.webpackChunk_genzy_io_docs||[]).push([[852],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=r,y=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return t?a.createElement(y,o(o({ref:n},c),{},{components:t})):a.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:(e,n,t)=>{t.d(n,{Z:()=>r});var a=t(7294);const r=function(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},9877:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(7462),r=t(7294),i=t(2389),o=t(5773),s=t(6010);const p={tabItem:"tabItem_LplD"};function l(e){const{lazy:n,block:t,defaultValue:i,values:l,groupId:c,className:u}=e,m=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),d=l??m.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),y=(0,o.lx)(d,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===i?i:i??m.find((e=>e.props.default))?.props.value??m[0]?.props.value;if(null!==g&&!d.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${d.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:h}=(0,o.UB)(),[v,b]=(0,r.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,o.o5)();if(null!=c){const e=f[c];null!=e&&e!==v&&d.some((n=>n.value===e))&&b(e)}const k=e=>{const n=e.currentTarget,t=x.indexOf(n),a=d[t].value;a!==v&&(T(n),b(a),null!=c&&h(c,a))},N=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]||x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]||x[x.length-1];break}}n?.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},u)},d.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,key:n,ref:e=>x.push(e),onKeyDown:N,onFocus:k,onClick:k},i,{className:(0,s.Z)("tabs__item",p.tabItem,i?.className,{"tabs__item--active":v===n})}),t??n)}))),n?(0,r.cloneElement)(m.filter((e=>e.props.value===v))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},m.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==v})))))}function c(e){const n=(0,i.Z)();return r.createElement(l,(0,a.Z)({key:String(n)},e))}},1706:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>p,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905)),i=t(9877),o=t(8215);const s={title:"Types Configuration",sidebar_position:4,slug:"/service-class-types-config/"},p=void 0,l={unversionedId:"categories/Services/service-class-types-config",id:"categories/Services/service-class-types-config",title:"Types Configuration",description:"If you'd like Genzy to be able to generate a detailed OpenAPI documentation, with SwaggerUI that includes Type Definitions, you can define types in a $genzy property.",source:"@site/docs/categories/06-Services/service-class-types-config.md",sourceDirName:"categories/06-Services",slug:"/service-class-types-config/",permalink:"/docs/v1/service-class-types-config/",tags:[],version:"current",lastUpdatedAt:1697306351,formattedLastUpdatedAt:"10/14/2023",sidebarPosition:4,frontMatter:{title:"Types Configuration",sidebar_position:4,slug:"/service-class-types-config/"},sidebar:"sidebar",previous:{title:"Parameter Configuration",permalink:"/docs/v1/service-class-params-config/"},next:{title:"GenzyContainer",permalink:"/docs/v1/genzy-container/"}},c=[],u={toc:c},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you'd like ",(0,r.kt)("inlineCode",{parentName:"p"},"Genzy")," to be able to generate a detailed ",(0,r.kt)("a",{parentName:"p",href:"https://www.openapis.org/"},"OpenAPI")," documentation, with ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/"},"SwaggerUI")," that includes ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/docs/specification/data-models/data-types/"},"Type Definitions"),", you can define types in a ",(0,r.kt)("inlineCode",{parentName:"p"},"$genzy")," property."),(0,r.kt)("p",null,"If you're using ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript")," you can define configuration using ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/decorators.html"},"TypeScript decorators"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you're using decorators, make sure that you've set ",(0,r.kt)("inlineCode",{parentName:"p"},'"experimentalDecorators"')," option to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file."))),(0,r.kt)(i.Z,{groupId:"lang",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cjs",label:"CommonJS",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const exampleTypeDefinition = {\n  $typeName: \"Example\",\n  $isArray: false,\n  name: \"string\",\n  age: \"number\"\n};\n\nconst exampleArrayTypeDefinition = {\n  ...exampleTypeDefinition,\n  $isArray: true,\n};\n\nclass ExampleService {\n  $genzy = {\n    path: '/',\n    getAll: {\n      httpMethod: 'GET',\n      path: '/',\n      params: [\n        { source: 'query', name: \"pageNumber\", type: 'string' },\n        { source: 'query', name: \"pageSize\", type: 'string' },\n      ],\n      result: exampleArrayTypeDefinition\n    },\n    getById: {\n      httpMethod: 'GET',\n      path: '/:id',\n      params: [\n        { source: 'query', name: \"includeDetails\", type: 'boolean' }\n        { source: 'path', name: 'id', type: 'string' },\n      ],\n      result: exampleTypeDefinition\n    },\n    add: {\n      httpMethod: 'POST',\n      path: '/',\n      params: [\n        { source: 'body', name: 'example', type: exampleTypeDefinition }\n      ],\n      result: exampleTypeDefinition\n    },\n    update: {\n      httpMethod: 'PUT',\n      path: '/:id',\n      params: [\n        { source: 'path', name: 'id', type: 'string' },\n        { source: 'body', name: 'example', type: exampleTypeDefinition }\n      ],\n      result: exampleTypeDefinition\n    },\n    delete: {\n      httpMethod: 'DELETE',\n      path: '/:id',\n      params: [\n        { source: 'path', name: 'id', type: 'string' },\n      ],\n      result: exampleTypeDefinition\n    },\n  }\n  \n  async getAll(pageNumber, pageSize) {\n    return [];\n  }\n  async getById(includeDetails, id) {\n    return [];\n  }\n  async add(example) {\n    return example;\n  }\n  async update(id, example) {\n    return example;\n  }\n  async delete(id) {\n    return { id };\n  }\n}\n"))),(0,r.kt)(o.Z,{value:"mjs",label:"ES modules",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const exampleTypeDefinition = {\n  $typeName: \"Example\",\n  $isArray: false,\n  name: \"string\",\n  age: \"number\"\n};\n\nconst exampleArrayTypeDefinition = {\n  ...exampleTypeDefinition,\n  $isArray: true,\n};\n\nclass ExampleService {\n  $genzy = {\n    path: '/',\n    getAll: {\n      httpMethod: 'GET',\n      path: '/',\n      params: [\n        { source: 'query', name: \"pageNumber\", type: 'string' },\n        { source: 'query', name: \"pageSize\", type: 'string' },\n      ],\n      result: exampleArrayTypeDefinition\n    },\n    getById: {\n      httpMethod: 'GET',\n      path: '/:id',\n      params: [\n        { source: 'query', name: \"includeDetails\", type: 'boolean' }\n        { source: 'path', name: 'id', type: 'string' },\n      ],\n      result: exampleTypeDefinition\n    },\n    add: {\n      httpMethod: 'POST',\n      path: '/',\n      params: [\n        { source: 'body', name: 'example', type: exampleTypeDefinition }\n      ],\n      result: exampleTypeDefinition\n    },\n    update: {\n      httpMethod: 'PUT',\n      path: '/:id',\n      params: [\n        { source: 'path', name: 'id', type: 'string' },\n        { source: 'body', name: 'example', type: exampleTypeDefinition }\n      ],\n      result: exampleTypeDefinition\n    },\n    delete: {\n      httpMethod: 'DELETE',\n      path: '/:id',\n      params: [\n        { source: 'path', name: 'id', type: 'string' },\n      ],\n      result: exampleTypeDefinition\n    },\n  }\n  \n  async getAll(pageNumber, pageSize) {\n    return [];\n  }\n  async getById(includeDetails, id) {\n    return [];\n  }\n  async add(example) {\n    return example;\n  }\n  async update(id, example) {\n    return example;\n  }\n  async delete(id) {\n    return { id };\n  }\n}\n"))),(0,r.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Controller, Get, Post, Put, Delete, Query, Path, Body, string, number, boolean, type, Returns, ReturnsArrayOf } from \"@genzy/client\"; // or @genzy/api\n\nclass Example {\n  @string() name: string;\n  @number age: number;\n}\n\n@Controller('/')\nclass ExampleService {\n  @Get()\n  @ReturnsArrayOf(Example)\n  async getAll(@Query('pageNumber') @number pageNumber: number, @Query('pageSize') @number pageSize: number): Promise<Example[]> {\n    return [];\n  }\n  @Get('/:id')\n  @Returns(Example)\n  async getById(@Query('includeDetails') @boolean includeDetails: boolean, @Path('id') @string() id: string): Promise<Example> {\n    return {};\n  }\n  @Post()\n  @Returns(Example)\n  async add(@Body() @type(Example) example: Example): Promise<Example> {\n    return example;\n  }\n  @Put('/:id')\n  @Returns(Example)\n  async update(@Path('id') @string() id: string, @Body() @type(Example) example: Example): Promise<Example> {\n    return example;\n  }\n  @Delete('/:id')\n  @Returns(Example)\n  async delete(@Path('id') @string() id: string): Promise<Example> {\n    return { id };\n  }\n}\n")))),(0,r.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Types configuration is used at the server side, since it is used for telling ",(0,r.kt)("inlineCode",{parentName:"p"},"Genzy")," how to set up a detailed ",(0,r.kt)("a",{parentName:"p",href:"https://www.openapis.org/"},"OpenAPI")," documentation, with ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/"},"SwaggerUI")," that includes ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/docs/specification/data-models/data-types/"},"Type Definitions"),"."))))}d.isMDXComponent=!0}}]);