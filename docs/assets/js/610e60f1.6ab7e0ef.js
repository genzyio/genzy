"use strict";(self.webpackChunk_genzy_io_docs=self.webpackChunk_genzy_io_docs||[]).push([[991],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>y});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,y=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return r?t.createElement(y,i(i({ref:n},u),{},{components:r})):t.createElement(y,i({ref:n},u))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5740:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=r(7462),a=(r(7294),r(3905));const o={title:"Creating the API",sidebar_label:"Creating the API",sidebar_position:1,slug:"/quickstart/api"},i="Creating the API",s={unversionedId:"framework/Guides/creating-api",id:"framework/Guides/creating-api",title:"Creating the API",description:"1. npm init -y",source:"@site/docs/framework/02-Guides/creating-api.md",sourceDirName:"framework/02-Guides",slug:"/quickstart/api",permalink:"/docs/0.0.1-alpha/quickstart/api",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Creating the API",sidebar_label:"Creating the API",sidebar_position:1,slug:"/quickstart/api"},sidebar:"sidebar",previous:{title:"Guides",permalink:"/docs/0.0.1-alpha/guides/"},next:{title:"Generating the client",permalink:"/docs/0.0.1-alpha/quickstart/client"}},c={},l=[],u={toc:l},p="wrapper";function m(e){let{components:n,...r}=e;return(0,a.kt)(p,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"creating-the-api"},"Creating the API"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"npm init -y")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"npm i -D typescript ts-node")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"npx tsc --init")),(0,a.kt)("li",{parentName:"ol"},"Update ",(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // ...\n  "experimentalDecorators": true,\n  "strictPropertyInitialization": false\n}\n')),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"npm i -S @genzy.io/api")),(0,a.kt)("li",{parentName:"ol"},"Implement services")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class AccountService {\n  private userService: UserService;\n\n  // UserService is automatically injected\n  constructor({ userService }: { userService: UserService }) {\n    this.userService = userService;\n  }\n\n  async createAccount(account: Account): Promise<Account> {\n    if (await this.userService.checkIfUserExists(account.username)) {\n      throw new UserAlreadyExistsError(\n        `A user \'${account.username}\' already exists.`\n      );\n    }\n    // logic for adding the account\n    const newAccount = { id: 1, ...account };\n    // return result\n    return newAccount;\n  }\n}\n\n// models\nimport { string, boolean } from "@genzy.io/api";\n\nclass Account {\n  @string() username: string;\n  @boolean() isAdmin: boolean;\n}\n\n// errors\nclass UserAlreadyExistsError extends Error {\n  name = "UserAlreadyExistsError";\n  constructor(message?: string) {\n    super(message);\n  }\n}\n\nclass UserService {\n  private userRepository: UserRepository;\n\n  // UserRepository is automatically injected\n  constructor({ userRepository }: { userRepository: UserRepository }) {\n    this.userRepository = userRepository;\n  }\n\n  async checkIfUserExists(username: string): Promise<boolean> {\n    // logic for checking if user exists\n    const user = await this.userRepository.findByUsername(username);\n    return !!user;\n  }\n}\n\nclass UserRepository {\n  async findByUsername(username: string) {\n    // logic for finding a user from db by username\n    return { username };\n  }\n}\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Create a controller")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Controller, Post } from "@genzy.io/api";\n\n@Controller("/account")\nclass AccountController {\n  private accountService: AccountService;\n\n  constructor({ services }: { services: { accountService: AccountService } }) {\n    this.accountService = services.accountService;\n  }\n\n  @Post("/")\n  @Returns(Account)\n  async create(@Body({ type: Account }) account: Account): Promise<Account> {\n    return this.accountService.createAccount(account);\n  }\n}\n')),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Create a Container of controllers and services")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { GenzyContainer } from "@genzy.io/api";\n\nconst controllers = new GenzyContainer().addLocalServices(AccountController);\n\nconst services = new GenzyContainer().addLocalServices(\n  UserService,\n  AccountService,\n  UserRepository\n);\n\n// add access to services\ncontrollers.addAccessToContainer("services", services);\n\n// you can get service instances directly from the container\nconst { userService, accountService, userRepository } = services.getServices();\n')),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Create the API")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { GenzyApi } from "@genzy.io/api";\n\n// returns Express Application\nconst app = new GenzyApi({\n  genzyInfo: {\n    name: "Account API",\n    version: "0.0.1",\n    description: "This API is used for creating accounts.",\n  },\n})..buildAppFrom(controllers);\n\n// start the server\napp.listen(3000);\n')),(0,a.kt)("p",null,"=>"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# POST /api/account route is registered\n# you can go to /explorer and use Swagger UI\n# there is also a special /api/meta route used by Genzy to generate code\n")))}m.isMDXComponent=!0}}]);