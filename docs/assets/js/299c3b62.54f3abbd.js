"use strict";(self.webpackChunk_genzy_io_docs=self.webpackChunk_genzy_io_docs||[]).push([[736],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),y=o,f=p["".concat(i,".").concat(y)]||p[y]||u[y]||c;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=y;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<c;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2902:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const c={title:"Client Interceptors"},a=void 0,s={unversionedId:"framework/Advanced-Guides/Interceptors/client",id:"framework/Advanced-Guides/Interceptors/client",title:"Client Interceptors",description:"Client Interceptors",source:"@site/docs/framework/03-Advanced-Guides/04-Interceptors/02-client.md",sourceDirName:"framework/03-Advanced-Guides/04-Interceptors",slug:"/framework/Advanced-Guides/Interceptors/client",permalink:"/docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/client",draft:!1,tags:[],version:"current",lastUpdatedAt:1697391667,formattedLastUpdatedAt:"Oct 15, 2023",sidebarPosition:2,frontMatter:{title:"Client Interceptors"},sidebar:"sidebar",previous:{title:"API Interceptors",permalink:"/docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/server"},next:{title:"Error Mapping",permalink:"/docs/0.0.1-alpha/framework/Advanced-Guides/Interceptors/error"}},i={},l=[{value:"Client Interceptors",id:"client-interceptors",level:2}],d={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"client-interceptors"},"Client Interceptors"),(0,o.kt)("p",null,"A mechanism for intercepting client API calls and it's results. It can be used for things like setting custom headers, parsing the response body, etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// Intercept all service calls\nconst container = new GenzyContainer()\n  .addRemoteService(UserService, host)\n  .interceptAllCalls(({ setHeader, getHeader, setBody, getBody }) => {\n    setHeader("Authorization", "Bearer <token>");\n  });\n\n// Intercept only specific method calls\nconst container = new GenzyContainer()\n  .addRemoteService(UserService, host)\n  .interceptCalls({\n    accountController: {\n      create({ setHeader, getHeader, setBody, getBody }) {\n        setBody({ ...getBody(), timestamp: new Date() });\n      },\n    },\n  });\n\n// Define interceptors with an interceptor class\nclass AccountControllerCallInterceptor {\n  create({ setHeader, getHeader, setBody, getBody }) {\n    setHeader("classCallInterceptor", "Works!");\n  }\n}\nconst container = new GenzyContainer()\n  .addRemoteService(UserService, host)\n  .interceptCalls({\n    accountController: AccountControllerCallInterceptor,\n  });\n\n// Intercept all service results\nconst container = new GenzyContainer()\n  .addRemoteService(UserService, host)\n  .interceptAllResults(({ setHeader, getHeader, setBody, getBody }) => {\n    validateBody(getBody());\n    setToken(getHeader("Token"));\n  });\n\n// Intercept only specific method results\nconst container = new GenzyContainer()\n  .addRemoteService(UserService, host)\n  .interceptResults({\n    accountController: {\n      create({ setHeader, getHeader, setBody, getBody }) {\n        setBody({ ...getBody(), count: getBody().items.length });\n      },\n    },\n  });\n\n// Define interceptors with an interceptor class\nclass AccountControllerResultInterceptor {\n  create({ setHeader, getHeader, setBody, getBody }) {\n    setHeader("classResultInterceptor", "Works!");\n  }\n}\nconst container = new GenzyContainer()\n  .addRemoteService(UserService, host)\n  .interceptResults({\n    accountController: AccountControllerResultInterceptor,\n  });\n')))}u.isMDXComponent=!0}}]);